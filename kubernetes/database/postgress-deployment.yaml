apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: nexus-security
  labels:
    app: postgresql
    component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        component: database
    spec:
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: database-name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config-volume
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config-volume
        configMap:
          name: postgres-config
          items:
          - key: postgresql.conf
            path: postgresql.conf
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
      serviceAccountName: postgres-sa
      securityContext:
        fsGroup: 999
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: nexus-security
  labels:
    app: postgresql
    component: database
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-sa
  namespace: nexus-security
  labels:
    app: postgresql
    component: database

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: nexus-security
  labels:
    app: postgresql
    component: database
data:
  database-name: "nexus_security"
  postgresql.conf: |
    # PostgreSQL configuration for Nexus-Security
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 512MB
    effective_cache_size = 2GB
    work_mem = 16MB
    maintenance_work_mem = 256MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    
    # Security
    ssl = off
    password_encryption = scram-sha-256

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: nexus-security
  labels:
    app: postgresql
    component: database
data:
  01-init-extensions.sql: |
    -- Enable required extensions for Nexus-Security
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
  02-init-schema.sql: |
    -- Basic schema initialization for Nexus-Security
    -- This will be replaced by your migration scripts
    
    -- Users table
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        wallet_address VARCHAR(42) UNIQUE NOT NULL,
        username VARCHAR(50) UNIQUE,
        email VARCHAR(255),
        reputation_score INTEGER DEFAULT 0,
        is_verified BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Bounties table
    CREATE TABLE IF NOT EXISTS bounties (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        title VARCHAR(255) NOT NULL,
        description TEXT,
        reward_amount DECIMAL(18,8) NOT NULL,
        token_address VARCHAR(42) NOT NULL,
        creator_id UUID REFERENCES users(id),
        status VARCHAR(20) DEFAULT 'open',
        expires_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Analysis results table
    CREATE TABLE IF NOT EXISTS analysis_results (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        bounty_id UUID REFERENCES bounties(id),
        analyzer_id UUID REFERENCES users(id),
        file_hash VARCHAR(64) NOT NULL,
        verdict VARCHAR(20) NOT NULL,
        confidence_score DECIMAL(5,4),
        analysis_data JSONB,
        stake_amount DECIMAL(18,8),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Indexes for performance
    CREATE INDEX IF NOT EXISTS idx_users_wallet_address ON users(wallet_address);
    CREATE INDEX IF NOT EXISTS idx_bounties_creator_status ON bounties(creator_id, status);
    CREATE INDEX IF NOT EXISTS idx_analysis_results_bounty ON analysis_results(bounty_id);
    CREATE INDEX IF NOT EXISTS idx_analysis_results_file_hash ON analysis_results(file_hash);